generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    slug        String   @unique
    price       Float
    description String
    isFeatured  Boolean  @default(false)
    rating      Int      @default(0)
    poster      String
    images      String[]
    vector      Bytes?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    categoryId        Int
    category          Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    reviews           Review[]
    productAttributes ProductAttribute[]

    @@index([slug, categoryId, price, rating])
}

model ProductAttribute {
    id        Int      @id @default(autoincrement())
    name      String
    values    String[]
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
}

model Category {
    id                 Int                 @id @default(autoincrement())
    name               String
    slug               String              @unique
    image              String
    description        String?
    products           Product[]
    categoryAttributes CategoryAttribute[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([slug])
}

model CategoryAttribute {
    id             Int      @id @default(autoincrement())
    name           String
    possibleValues String[]
    description    String?
    categoryId     Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@index([categoryId])
}

model Review {
    id        Int      @id @default(autoincrement())
    rating    Int      @default(0)
    comment   String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id             String    @id @default(cuid())
    name           String?
    role           UserRole  @default(USER)
    hashedPassword String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Review         Review[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
