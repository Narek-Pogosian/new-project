generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    slug        String   @unique
    description String
    price       Float
    rating      Int      @default(0)
    poster      String
    images      String[]
    stock       Int      @default(0)
    sku         String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Category         Category           @relation(fields: [categoryId], references: [id])
    categoryId       Int
    Review           Review[]
    ProductAttribute ProductAttribute[]
    Inventory        Inventory[]

    @@index([slug, categoryId])
}

model Category {
    id                 Int                 @id @default(autoincrement())
    name               String
    slug               String              @unique
    image              String?
    description        String?
    parentId           Int?
    parent             Category?           @relation("CategoryToParent", fields: [parentId], references: [id])
    subcategories      Category[]          @relation("CategoryToParent")
    products           Product[]
    CategoryAttributes CategoryAttribute[]

    @@index([slug])
}

model ProductAttribute {
    id        Int         @id @default(autoincrement())
    name      String // Example: Size, Color
    value     String // Example: Small, Blue
    productId Int
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    product   Product     @relation(fields: [productId], references: [id])
    Inventory Inventory[]

    @@index([productId])
}

model CategoryAttribute {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    categoryId  Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    category    Category @relation(fields: [categoryId], references: [id])

    @@index([categoryId])
}

model Inventory {
    id                 Int              @id @default(autoincrement())
    quantity           Int
    productId          Int
    productAttributeId Int
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    product            Product          @relation(fields: [productId], references: [id])
    productAttribute   ProductAttribute @relation(fields: [productAttributeId], references: [id])

    @@index([productId])
}

model Review {
    id        Int      @id @default(autoincrement())
    rating    Int      @default(0)
    comment   String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    role          UserRole  @default(USER)
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Review        Review[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
