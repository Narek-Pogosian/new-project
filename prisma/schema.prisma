generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    price       Float
    rating      Float?
    imageUrl    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    categoryId Int?
    category   Category? @relation(fields: [categoryId], references: [id])

    reviews    Review[]
    orderItems OrderItem[]
}

model Category {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products Product[]
}

enum OrderStatus {
    pending
    shipped
    completed
}

model Order {
    id        Int         @id @default(autoincrement())
    status    OrderStatus
    total     Float
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    userId     String
    user       User        @relation(fields: [userId], references: [id])
    orderItems OrderItem[]
}

model OrderItem {
    id        Int   @id @default(autoincrement())
    orderId   Int
    productId Int
    quantity  Int
    price     Float

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Review {
    id        Int      @id @default(autoincrement())
    productId Int
    rating    Int
    comment   String?
    createdAt DateTime @default(now())

    userId  String
    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Order         Order[]
    Review        Review[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
